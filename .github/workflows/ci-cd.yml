name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install Backend Dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run Backend Tests
      working-directory: ./backend
      run: |
        npm test --if-present
        npm run lint --if-present
    
    - name: Run Frontend Tests
      working-directory: ./frontend
      run: |
        npm test -- --coverage --watchAll=false
        npm run lint --if-present
    
    - name: Build Frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Upload Frontend Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-${{ matrix.node-version }}
        path: frontend/build/

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Backend Docker Image
      run: |
        docker build -t realtime-collab-backend:latest ./backend
    
    - name: Build Frontend Docker Image
      run: |
        docker build -t realtime-collab-frontend:latest ./frontend
    
    - name: Test Docker Compose
      run: |
        docker-compose up -d
        sleep 30
        curl -f http://localhost:5000 || exit 1
        curl -f http://localhost:3000 || exit 1
        docker-compose down

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Security Audit - Backend
      working-directory: ./backend
      run: npm audit --audit-level high
    
    - name: Run Security Audit - Frontend
      working-directory: ./frontend
      run: npm audit --audit-level high

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, docker-build, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment"
        # Add your staging deployment commands here
        # For example: deploy to Heroku, Vercel, or your own server

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Production
      run: |
        echo "Deploying to production environment"
        # Add your production deployment commands here
        # For example: deploy to AWS, GCP, Azure, etc.

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
        cache: 'npm'
    
    - name: Install Dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci
    
    - name: Run ESLint
      run: |
        cd frontend && npm run lint --if-present
    
    - name: Run Prettier Check
      run: |
        cd frontend && npx prettier --check src/ --if-present
